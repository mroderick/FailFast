var FailFast={assert:function(c,b){var a=b||"FailFast.assert: The passed expression is not true";if(c!==true){if(console&&console.error&&typeof jstestdriver==="undefined"){console.error(a)}throw (new Error(a))}},assertBoolean:function(c,b){var a=b||"FailFast.assertNumber: The passed argument is not a Boolean";this.assert(typeof c==="boolean",a)},assertNotNull:function(c,b){var a=b||"FailFast.assertNumber: The passed argument is null";this.assert(c!==null,a)},assertNumber:function(c,b){var a=b||"FailFast.assertNumber: The passed argument is not a Number";this.assert(!isNaN(parseInt(c,10)),a)},assertNormalNumber:function(c,b){var a=b||'FailFast.assertNormalNumber: The passed argument is not a "normal" Number';this.assertNumber(c,a);this.assert(!isNaN(c),a);this.assert(c!==Number.MIN_VALUE,a);this.assert(c!==Number.MAX_VALUE,a);this.assert(c!==Number.NEGATIVE_INFINITY,a);this.assert(c!==Number.POSITIVE_INFINITY,a)},assertObject:function(c,b){var a=b||"FailFast.assertObject: The passed argument is not an Object";this.assertNotNull(c,a);this.assert(typeof c==="object",a)},assertInstanceOf:function(a,d,c){var b=c||"FailFast.assertInstanceOf: The passed argument is not an instance of the specified class";this.assert(d!==undefined,b);this.assert(d instanceof a,b)},assertHasProperty:function(b,a,d){var c=d||'FailFast.assertHasProperty: The passed object does not have a property named "%d"'.replace("%d",a);this.assert(a in b,c)},assertString:function(c,b){var a=b||"FailFast.assertString: The passed argument is not a String";this.assert(c!==undefined&&typeof c==="string"||c instanceof String,a)},assertArray:function(c,b){var a=b||"FailFast.assertArray: The passed argument is not an Array";this.assert(c!==undefined,b);this.assert(Object.prototype.toString.call(c)==="[object Array]",a)},assertFunction:function(c,b){var a=b||"FailFast.assertFunction: The passed argument is not a Function";this.assert(typeof c==="function",b)}};